jobs:
- job: lint_and_test
  displayName: 'Lint & Test'

  pool:
    vmImage: 'ubuntu-18.04'
  
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
        tox.env: "py36"
      Python37:
        python.version: '3.7'
        tox.env: "py37"
      Python38:
        python.version: '3.8'
        tox.env: "py38"

  variables:
    PIP_CACHE_DIR: ".cache/pip"
    PIP_SRC: ".cache/src"
    POETRY_VIRTUALENVS_CREATE: false
    PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache

  steps:
  - task: UsePythonVersion@0
    displayName: 'Set Python version'
    inputs:
      versionSpec: '$(python.version)'
      addToPath: true

  - script: python3 -m pip install setuptools importlib-metadata
    displayName: 'Install base dependencies'

  - script: python3 -m pip install poetry && poetry install
    displayName: 'Install Project Environment'

  - task: Cache@2
    displayName: 'Restore pre-commit environment'
    condition: and(succeeded(), eq(variables['python.version'], '3.8'))
    inputs:
      key: pre-commit | "$(PythonVersion.pythonLocation)" | .pre-commit-config.yaml
      restoreKeys: |
        pre-commit | "$(PythonVersion.pythonLocation)"
      path: $(PRE_COMMIT_HOME)

    # This will also take care of linting, as we utilize a flake8 hook
    # Only run this in one python environment
  - script: pre-commit run --all-files
    condition: and(succeeded(), eq(variables['python.version'], '3.8'))
    displayName: 'Run pre-commit hooks'

  - script: tox -e $(tox.env)
    displayName: 'Test & generate coverage'
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'flake8-annotations Test Results'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Coverage Results'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '**/cov.xml'
